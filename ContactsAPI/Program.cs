using Microsoft.EntityFrameworkCore;
using OWTChallenge.Infrastructure.Data;
using OWTChallenge.Infrastructure.Repositories;
using OWTChallenge.SharedKernel.Interfaces;
using Microsoft.OpenApi.Models;
using OWTChallenge.Core.Interfaces;
using OWTChallenge.Infrastructure.UnitOfWork;
using System.Reflection;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<OWTChallengeContext>(options =>
{
    options.UseSqlServer(builder.Configuration.GetConnectionString("OWTChallengeConnection"), sqlOptions => { });
});

// Add services to the container.
builder.Services.AddTransient<IUnitOfWork, UnitOfWork>();


builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c => 
        {
            c.SwaggerDoc("v1", new OpenApiInfo { 
                Title = "OWT Challenge : Contacts API", 
                Version = "v1",
                Description = "Simple Core API, following a clean Architecture, where a user can get a quick overview over all contacts resources.",
                Contact = new OpenApiContact
                { 
                    Name = "Zainab ZINE",
                    Email = "zainab.zine@gmail.com"
                }
            });

            //Locate the XML file being generated by ASP.NET
            var filePath = Path.Combine(AppContext.BaseDirectory, "ContactsAPISwaggerDoc.xml");

            //... and tell Swagger to use those XML comments.
            c.IncludeXmlComments(filePath);
        });
    


var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseAuthorization();

app.MapControllers();

app.Run();
